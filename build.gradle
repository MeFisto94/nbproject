apply plugin: 'java';

task downloadEngine << {
    File folder = file("engine");

    if (!folder.exists()) {
        println "Downloading the Engine";

        exec {
            commandLine 'git', 'clone', '-b', 'v3.1', '--single-branch', '--depth', '1', 'https://github.com/jMonkeyEngine/jMonkeyEngine.git', 'engine'
        }
    } else {
        println "Trying to update the Engine..."
        exec {
            commandLine 'git', 'pull'
            workingDir 'engine'
        }
    }
}

task buildEngine(type: GradleBuild, dependsOn: downloadEngine) {
    println "Building the Engine...."

    buildFile = 'engine/build.gradle'
    tasks = ['assemble', 'dist', 'javadocJar', 'sourcesJar'];
}

task copyLibs(type: Copy, dependsOn: buildEngine) {
    File folder = file("libs");

    if (folder.exists())
        folder.delete() // This only happens when something changed anyway

    from {
        fileTree(dir: "engine", includes: ["*/build/libs/jme3-*.jar"]).files // fileTree to remove the path (and only keep the filename)
    }

    into "libs"
}

task setupSuite(dependsOn: copyLibs) << {
    // Setup Netbeans
    def platformFile = file("nbproject/private/platform-private.properties")

    if (!platformFile.exists()) {
        def netbeansFolder = file("netbeans")

        if(!netbeansFolder.exists() || netbeansFolder.list().length == 0) {
            println "Downloading NetBeans Platform base, this only has to be done once.."
            def f = file("netbeans.zip")

            new URL(netbeansUrl).withInputStream{ i -> f.withOutputStream{ it << i }}
            copy {
                from zipTree(f)
                into "."
            }

            f.delete()
        }

        file("nbproject/private/").mkdirs()
        platformFile.createNewFile() // Tell them where netbeans lies
        platformFile.write("nbplatform.default.netbeans.dest.dir=${netbeansFolder.absolutePath.replace('\\','/')}\r\n"+\
        "nbplatform.default.harness.dir=${netbeansFolder.absolutePath.replace('\\','/')}/harness\r\n")
    }
}

task cleanSuite << {
    File f = file("libs")
    if (f.exists())
        f.delete()

    f = file("build")
    if (f.exists())
        f.delete()

    f = file("engine")
    if (f.exists())
        f.delete()
}